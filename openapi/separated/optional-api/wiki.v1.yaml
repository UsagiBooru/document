components:
  parameters:
    SearchQueryMylistAllow:
      description: マイリスト追加済みかを取得する0/1 (デフォルト1)
      in: query
      name: with_mylisted
      required: false
      schema:
        default: 1
        enum:
        - 1
        - 0
        example: 1
        format: int32
        maximum: 1
        minimum: 0
        type: integer
    SearchQueryMylistDeny:
      description: マイリスト追加済みかを取得する0/1 (デフォルト0)
      in: query
      name: with_mylisted
      schema:
        default: 0
        enum:
        - 0
        - 1
        example: 0
        maximum: 1
        minimum: 0
        type: integer
    SearchQueryOrder:
      description: ソート方向 d:降順(大→小) a:昇順(小→大)
      in: query
      name: order
      required: false
      schema:
        default: d
        enum:
        - d
        - a
        example: d
        maxLength: 1
        minLength: 1
        type: string
    SearchQueryPage:
      description: 'ページ番号 (NOTE: 1ページ辺りの応答は20件)'
      in: query
      name: page
      required: false
      schema:
        minimum: 1
        type: integer
    SearchQueryPerPage:
      description: 1ページ辺りの要素数
      in: query
      name: per_page
      required: false
      schema:
        default: 20
        enum:
        - 20
        - 40
        - 60
        - 80
        - 100
        example: 20
        maximum: 100
        minimum: 20
        type: integer
    SearchQuerySort:
      description: ソート方法 l:いいね数順 d:投稿日順
      in: query
      name: sort
      required: false
      schema:
        default: d
        enum:
        - l
        - d
        example: d
        type: string
    SearchQuerySortCatalog:
      description: ソート方法 c:ヒット数 d:最終更新 l:いいね数 n:名前
      in: query
      name: sort
      schema:
        default: d
        enum:
        - c
        - d
        - l
        - n
        example: d
        type: string
  schemas:
    GeneralMessageResponse:
      description: 共通の応答構造体(404/401/400等を返す際に使用)
      properties:
        message:
          description: 応答メッセージ(何が間違っているかの詳細)
          minLength: 1
          type: string
      required:
      - message
      title: GeneralMessageResponse
      type: object
      x-examples:
        bad-request:
          message: Your request body is wrong.
        locked:
          message: Specified content is referenced from other content.
        no-permission:
          message: You don't have enough permission to do it.
        not-found:
          message: Specified content was not found.
    GetWikiArticlesResponse:
      description: Wikiの記事情報一覧の応答構造体
      properties:
        articles:
          items:
            $ref: '#/components/schemas/WikiArticleStruct'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationStruct'
      title: GetWikiArticlesResponse
      type: object
      x-examples:
        example:
          articles:
          - articleID: 1
            author:
              accountID: 1
              name: お窓
            body: One of UsagiBooru developer. Loves kafuu chino.
            date: '2021-03-22'
            revision: 1
            targetID: 1
            targetType: user
            title: お窓とは
          pagination:
            count: 1
            current: 1
            pages: 1
            perPage: 20
            title: Wiki記事一覧
            type: article
    LightAccountStruct:
      description: アカウント情報の簡易構造体(読み取り専用)
      properties:
        accountID:
          description: アカウントID
          example: 1
          minimum: 1
          type: integer
        name:
          description: アカウント名
          example: お窓
          type: string
      title: LightAccountStruct
      type: object
      x-examples:
        example:
          accountID: 1
          name: お窓
    PaginationStruct:
      description: ページネーション情報の構造体
      properties:
        count:
          default: 0
          description: ヒット総数
          example: 1
          minimum: 0
          type: integer
        current:
          default: 1
          description: 現在のページ
          example: 1
          minimum: 1
          type: integer
        pages:
          default: 1
          description: ページ数
          example: 1
          minimum: 1
          type: integer
        perPage:
          default: 20
          description: ページ毎の取得数
          enum:
          - 20
          - 40
          - 60
          - 80
          - 100
          example: 20
          format: int32
          maximum: 100
          minimum: 20
          type: integer
        title:
          description: ページネーションタイトル(表示用)
          example: 香風智乃
          minLength: 1
          type: string
        type:
          default: tag
          description: ページネーション種別(表示用)
          enum:
          - artist
          - tag
          - uploader
          - notify-client
          - notify-condition
          - mute
          - follow
          - article
          - mylist-list
          - art
          - upload-history
          example: tag
          type: string
      required:
      - title
      - type
      - count
      - current
      - pages
      - perPage
      title: PaginationStruct
      type: object
      x-examples:
        example:
          count: 1
          current: 1
          pages: 1
          perPage: 20
          title: 香風智乃
          type: tag
    PostReportGeneralRequest:
      description: 通報を行う場合の汎用要求構造体
      properties:
        msg:
          description: 通報本文
          minLength: 1
          type: string
        type:
          default: bad-name
          description: 通報種別 1:不適切名称 2:不適切年齢 3:規約違反 4:法律違反
          enum:
          - bad-name
          - wrong-info
          - violation-rules
          - dmca
          example: bad-name
          type: string
      required:
      - type
      - msg
      title: ReportGeneralRequest
      type: object
      x-examples:
        example-1:
          msg: XSSしようとしてる人が居るみたいです、なんとかしてください
          type: bad-name
        example-2:
          msg: どうみてもエッチですあーいけません!
          type: wrong-info
        example-3:
          msg: 完全に同一の画像を上げ続け、運営を妨害している人が居ます
          type: violation-rules
        example-4:
          msg: DMCA Request
          type: dmca
    WikiArticleStruct:
      description: Wikiの記事の応答構造体
      properties:
        articleID:
          description: 記事ID
          example: 1
          minimum: 1
          type: integer
        author:
          $ref: '#/components/schemas/LightAccountStruct'
        body:
          description: 記事本文
          example: One of UsagiBooru developer. Loves kafuu chino.
          maxLength: 3000
          minLength: 1
          type: string
        date:
          description: 作成日時
          example: '2021-03-22'
          format: date
          type: string
        revision:
          default: 1
          description: 総編集回数
          example: 1
          minimum: 1
          type: integer
        targetID:
          description: 対象のユーザー/タグ/絵師ID
          minimum: 1
          type: integer
        targetType:
          default: user
          description: 対象の記事種別
          enum:
          - user
          - artist
          - tag
          example: user
          maxLength: 10
          minLength: 1
          type: string
        title:
          description: 記事タイトル
          example: お窓とは
          maxLength: 50
          minLength: 1
          type: string
      title: WikiArticleStruct
      type: object
      x-examples:
        example:
          articleID: 1
          author:
            accountID: 1
            name: お窓
          body: One of UsagiBooru developer. Loves kafuu chino.
          date: '2021-03-22'
          revision: 1
          targetID: 1
          targetType: user
          title: お窓とは
  securitySchemes:
    Authorization:
      scheme: bearer
      type: http
info:
  contact:
    email: dsgamer777@gmail.com
    name: Omado
    url: https://twitter.com/shallow_omado
  description: Wiki related api (optional)
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.ja.html
  title: UsagiBooru Wiki API
  version: '2.0'
openapi: 3.0.0
paths:
  /report/wiki/{articleID}:
    parameters:
    - description: 対象の記事ID
      in: path
      name: articleID
      required: true
      schema:
        type: integer
    post:
      description: '指定した記事を運営に通報します

        むやみに利用するとアカウントが停止される可能性があります'
      operationId: reportArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReportGeneralRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Not Found
      summary: Report article
      tags:
      - report
  /wiki:
    get:
      description: 全記事一覧を取得します
      operationId: getWikiArticles
      parameters:
      - $ref: '#/components/parameters/SearchQuerySortCatalog'
      - $ref: '#/components/parameters/SearchQueryOrder'
      - $ref: '#/components/parameters/SearchQueryPage'
      - $ref: '#/components/parameters/SearchQueryPerPage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWikiArticlesResponse'
          description: OK
      summary: Get wiki articles
      tags:
      - wiki
    post:
      description: Wikiの記事を作成します
      operationId: addWikiArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiArticleStruct'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiArticleStruct'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Forbidden
      summary: Add wiki article
      tags:
      - wiki
  /wiki/find:
    get:
      description: Wikiの記事が存在するかを確認します
      operationId: findWikiArticle
      parameters:
      - description: 対象の記事種別 0:ユーザー 1:タグ 2:絵師
        in: query
        name: type
        schema:
          type: integer
      - description: 対象の記事ID
        in: query
        name: id
        schema:
          type: integer
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Not Found
      summary: Find wiki article
      tags:
      - wiki
  /wiki/{articleID}:
    delete:
      description: Wikiの記事を削除します
      operationId: deleteWikiArticle
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: No Content
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Not Found
      summary: Delete wiki article
      tags:
      - wiki
    get:
      description: Wikiの記事を取得します
      operationId: getWikiArticle
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiArticleStruct'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Not Found
      summary: Get wiki article
      tags:
      - wiki
    parameters:
    - description: 対象の記事ID
      in: path
      name: articleID
      required: true
      schema:
        type: integer
    patch:
      description: Wikiの記事を編集します
      operationId: editWikiArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiArticleStruct'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiArticleStruct'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
          description: Not Found
      summary: Edit wiki article
      tags:
      - wiki
security:
- Authorization: []
servers:
- description: Prod
  url: https://api.gochiusa.team
- description: Staging
  url: https://api-next.gochiusa.team
- description: Dev
  url: http://127.0.0.1:8080
tags:
- name: report
- name: wiki
